<?php
/*  元字符： 不能在正则表达式中单独使用， 用来修饰原子的。 
 * 
 *   * 用来修饰其前面的原子可以出现0个1个或多个 (任意次)  {0,}
 *
 *   + 用来修饰其前面的原子可以出现1次或多次， 不能没有至少要出现在次 {1,}
 *
 *   ? 用来修饰其前面的原子可以出现0次或1次 {0,1}
 *
 *   {m}  m = 3 用来修饰其前面原子只能出现 m次， 多一次和少一次都不可以
 *   {n,m} {2.2,5} 用来修饰其前面的原子出现个数在n到m之间，包括n和m
 *   {n,} {2.2,} 用业修饰其前面的原子可以出现至少次
 *   {,m} {,5}   不行， 可以以0开始
 *
 * ^或\A     匹配输入字符串的开始位置（或在多行模式下行的开头，即紧随一个换行符之后）
    $或\Z    匹配输入字符串的结束位置（或在多行模式下行的结尾，即紧随一个换行符之前）
    \b       匹配单词的边界
    \B       匹配除单词边界以外的部分
    ( )      匹配其整体为一个原子，即模式单元。可以理解为由多个单个原子组成的大原子
 *   *
 */

$str = "this gogle is a PHPStudy";

$reg = "/go{0,5}gle/";


if(preg_match($reg, $str, $arr)) {
    echo "正则 <b>{$reg}</b>, 和字符串<b>{$str}</b>匹配成功<br>";
    print_r($arr);
} else {
    echo "匹配失败!<br>";
}

