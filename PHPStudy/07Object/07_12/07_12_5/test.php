<?php
/*
 *  命名空间 --- 名子空间
 *
 *	
 *	 1. 常量
 *	 2.2. 函数
 *	 3. 类
 *
 *
 * 一、 namespace 来声明
 * 二、 在namespace声明命名空间的代码上面，不能有任何PHP代码和HTML内容输出(除了declare ), 声明命名空间只能是第一条
 * 三、定义多个名子空间，以最后一个为主
 *四、在实际的编程实践中，非常不提倡在同一个文件中定义多个命名空间。 (不要在大括号外部加任何代码)

 __NAMESPACE__

 	www.lampbrother.net
 */
	

	namespace  net\lampbrother\www;
	include "hello.class.php";
	use net\lampbrother\www as nlw;
	//use net\lampbrother\www 就是www

	function var_dump($a) {
		echo "$a $a $a<br>";

		\var_dump($a);
	}

	nlw\var_dump(100);

	use \Hello ;//导入一个全局的类
	Hello::one();

/*
 * 7.1.1 PHP面向对象之面向过程详解
 * 7.1.2.2 PHP面向对象之面向对象编程思想详解
 * 7.1.3 PHP面向对象的重要优势及案例分析
 * 7.1.4--9 PHP类和对象之间的关系
 * 7.2.2.1 PHP如何抽象一个类
 * 7.2.2.2.2 PHP类中的成员属性和成员方法
 * 7.3.1 PHP实例化对象
 * 7.3.2.2 PHP画图理解对象在内存中的形式
 * 7.3.3 特殊的对象引用”$this”
 * 7.3.4--9 PHP构造方法
 * 7.3.5 PHP析构方法
 * 7.4--9.1 复习前面的面向对象知识
 * 7.5.1 PHP面向对象封装性1
 * 7.5.4--9 PHP面向对象封装性2
 * 7.5.3 PHP面向对象封装性之魔术方法1
 * 7.5.4--9 PHP面向对象封装性之魔术方法2
 * 7.6.1 PHP类的继承
 * 7.6.2.2 PHP类的访问类型控制
 * 7.6.3 PHP继承中的重载（覆盖）
 * 7.7.1 PHP常见的关键字
 * 7.7.2.2 static关键字的使用1
 * 7.7.3 static关键字的使用2
 * 7.7.4--9 单态（单例、单件）设计模式
 * 7.7.5 const关键字
 * 7.7.6 魔术方法__toString()
 * 7.7.7 魔术方法__clone()
 * 7.7.8 魔术方法__call()
 * 7.7.9 对象串行化（序列化）1
 * 7.7.10 对象串行化（序列化）2.2
 * 7.7.11 PHP数组的串行化（JSON格式）
 * 7.7.12 魔术方法__set_state()
 * 7.7.13 PHP 5.3以后新增的魔术方法
 * 7.7.14 自动加载类__autoload()
 * 7.8.1 PHP抽象方法和抽象类1
 * 7.8.2.2 PHP抽象方法和抽象类2
 * 7.8.3 PHP面向对象接口技术
 * 7.8.4--9 PHP接口应用的一些细节
 * 7.8.5 PHP面象对象的特性多态
 * 7.9.1 PHP多态的应用实例
 * 7.10.1 PHP图形计算器需求分析
 * 7.10.2.2 PHP图形计算器功能设计
 * 7.10.3 PHP图形计算器主程序的实现
 * 7.10.4--9 PHP图形计算器主程序的步骤及代
 * 7.10.5 PHP图形计算器主程序完成检验
 * 7.11.1 与类有关的魔术常量和函数
 * 7.12.1 PHP命名空间的概述
 * 7.12.2.2 PHP定义子命名空间
 * 7.12.3 PHP在同一文件中定义多个命名空间
 * 7.12.4--9 PHP命名空间和动态语言特征
 * 7.12.5 PHP使用命名空间：别名导入
 *
 *
 * */